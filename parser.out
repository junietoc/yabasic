Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    B
    END
    GOTO
    ID
    SEP
    STRING

Grammar

Rule 0     S' -> c
Rule 1     c -> s
Rule 2     value -> INT
Rule 3     term -> value OP value
Rule 4     expr -> value
Rule 5     s -> NUMBER LET VAR ASSIGN expr
Rule 6     s -> NUMBER PRINT VAR

Terminals, with rules where they appear

ASSIGN               : 5
B                    : 
END                  : 
GOTO                 : 
ID                   : 
INT                  : 2
LET                  : 5
NUMBER               : 5 6
OP                   : 3
PRINT                : 6
SEP                  : 
STRING               : 
VAR                  : 5 6
error                : 

Nonterminals, with rules where they appear

c                    : 0
expr                 : 5
s                    : 1
term                 : 
value                : 3 3 4

Parsing method: LALR

state 0

    (0) S' -> . c
    (1) c -> . s
    (5) s -> . NUMBER LET VAR ASSIGN expr
    (6) s -> . NUMBER PRINT VAR

    NUMBER          shift and go to state 3

    c                              shift and go to state 1
    s                              shift and go to state 2

state 1

    (0) S' -> c .



state 2

    (1) c -> s .

    $end            reduce using rule 1 (c -> s .)


state 3

    (5) s -> NUMBER . LET VAR ASSIGN expr
    (6) s -> NUMBER . PRINT VAR

    LET             shift and go to state 4
    PRINT           shift and go to state 5


state 4

    (5) s -> NUMBER LET . VAR ASSIGN expr

    VAR             shift and go to state 6


state 5

    (6) s -> NUMBER PRINT . VAR

    VAR             shift and go to state 7


state 6

    (5) s -> NUMBER LET VAR . ASSIGN expr

    ASSIGN          shift and go to state 8


state 7

    (6) s -> NUMBER PRINT VAR .

    $end            reduce using rule 6 (s -> NUMBER PRINT VAR .)


state 8

    (5) s -> NUMBER LET VAR ASSIGN . expr
    (4) expr -> . value
    (2) value -> . INT

    INT             shift and go to state 11

    expr                           shift and go to state 9
    value                          shift and go to state 10

state 9

    (5) s -> NUMBER LET VAR ASSIGN expr .

    $end            reduce using rule 5 (s -> NUMBER LET VAR ASSIGN expr .)


state 10

    (4) expr -> value .

    $end            reduce using rule 4 (expr -> value .)


state 11

    (2) value -> INT .

    $end            reduce using rule 2 (value -> INT .)

